function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperty(t,e,o){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var o=t[Symbol.toPrimitive];if(void 0===o)return("string"===e?String:Number)(t);o=o.call(t,e||"default");if("object"!=_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}var alphabet={constante:{point:{coord:[0,1],visible:!1},keyCurve:"1",options:{strokeColor:"#7f7879",strokeWidth:2},interval:[]},identidad:{point:{coord:[0,0],visible:!1},keyCurve:"x",options:{strokeColor:"#7f7879",strokeWidth:2}},identidadNegativa:{point:{coord:[0,0],visible:!1},keyCurve:"-x",options:{strokeColor:"#7f7879",strokeWidth:2}},exp:{point:{coord:[0,1],visible:!1},keyCurve:"exp(x)",options:{},interval:[]}},defBoards={board_1:{style:_defineProperty(_defineProperty({axis:[!1,!0,!0],valueAxis:{yd:[[0,0],[0,1]],yp:[-1,1,2,3],yv:["-1","1","2","3"],xd:[[0,0],[1,0]],colory:"#4f4f4f",colorx:"#4f4f4f"},grid:!0},"grid",{style:"#bfbaba"}),"boundingbox",[-4,4,4,-4]),alphabet:alphabet,asymptotes:[{x:0}]},board_2:{style:_defineProperty(_defineProperty({axis:[!1,!0,!0],valueAxis:{yd:[[0,0],[0,1]],yp:[-1,1,2,3],yv:["-1","1","2","3"],xd:[[0,0],[1,0]],colory:"#4f4f4f",colorx:"#4f4f4f"},grid:!0},"grid",{style:"#bfbaba"}),"boundingbox",[-4,4,4,-4]),alphabet:alphabet},board_3:{style:{axis:[!1,!0,!0],valueAxis:{yd:[[0,0],[0,1]],yp:[-1,1,2,3],yv:["-1","1","2","3"],xd:[[0,0],[1,0]],colory:"#4f4f4f",colorx:"#4f4f4f",gridColor:"red"},grid:{style:"#bfbaba"},boundingbox:[-4,4,4,-4]},lines:[{points:[[-4,-1],[4,-1]]}],alphabet:alphabet},board_4:{style:{axis:[!1,!0,!0],valueAxis:{yd:[[0,0],[0,1]],yp:[-1,1,2,3],yv:["-1","1","2","3"],xd:[[0,0],[1,0]],colory:"#4f4f4f",colorx:"#4f4f4f",gridColor:"red"},grid:{style:"#bfbaba"},boundingbox:[-4,4,4,-4]},lines:[{points:[[-4,-2],[4,-2]]}],alphabet:alphabet}},def={artifact_1:{curveCount:2,showCurveButton:!0,buttonAsyn:!0,instructionText:{text:"\\left(\\space\\right)^2=\\left(\\space\\right)\\cdot\\left(\\space\\right)",styleClass:[]},conditions:{multiplyCurves:["x","x"],asymptotes:[{x:-1,y:1},{x:1,y:1},{x:-1.5,y:2.2},{x:1.5,y:2.2}]}},artifact_2:{visibleAsyntote:!0,curveCount:2,showCurveButton:!0,instructionText:{text:"\\left(\\space\\right)^{-1}=\\frac{1}{\\left(\\space\\right)}",styleClass:[]},conditions:{operationType:3,multiplyCurves:["1","x"],asymptotes:[{x:-1,y:-1},{x:-2,y:-.5},{x:-.5,y:-2},{x:1,y:1},{x:2,y:.5},{x:.5,y:2}]}}};new GenerateSumConstant(def,defBoards);